<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="mainMapper">
	
	<!-- Board resultMap -->
	<resultMap type="Board" id="board_rm">
	   <id property="boardNo" column="BOARD_NO"/>
	   <result property="boardTitle" column="BOARD_TITLE"/>
	   <result property="boardContent" column="BOARD_CONTENT"/>
	   <result property="boardCode" column="BOARD_CODE"/>
	   <result property="memberNickname" column="MEMBER_NICKNAME"/>
	   <result property="profileImage" column="PROFILE_IMG"/>
	   <result property="thumbnail" column="THUMBNAIL"/>
	   <result property="requestPrice" column="REQUEST_PRICE"/>
	   <result property="categoryId" column="CATEGORY_ID"/>
	   <result property="parentCategoryId" column="PARENT_CATEGORY_ID"/>
	   <result property="memberNo" column="MEMBER_NO"/>
	</resultMap>
	
	<!-- Review resultMap -->
	<resultMap type="Review" id="review_rm">
		<id property="boardNo" column="BOARD_NO"/>
		<result property="reviewContent" column="REVIEW_CONTENT"/>
		<result property="reviewRating" column="REVIEW_RATING"/>
		<result property="supporterProfile" column="SUPPORTER_PROFILE"/>
		<result property="supporterNick" column="SUPPORTER_NICK"/>
		<result property="revieDate" column="REVIEW_DATE"/>
		<result property="memberNo" column="MEMBER_NO"/>
	</resultMap>
	
	<!-- RequestSupporter resultMap -->
	<resultMap type="RequestSupporter" id="supporter_rm">
		<id property="supporterNo" column="SUPPORTER_NO"/>
		<result property="supporterNickname" column="MEMBER_NICKNAME"/>
		<result property="supporterProfile" column="PROFILE_IMG"/>
		<result property="reviewRating" column="AVG_REVIEW_RATING"/>
		<result property="categoryName" column="CATEGORY_NAME"/>
		<result property="parentCategoryName" column="PARENT_CATEGORY_NAME"/>
		<result property="categoryId" column="CATEGORY_ID"/>
		<result property="memberNo" column="MEMBER_NO"/>
		<result property="boardCode" column="BOARD_CODE"/>
		<result property="topChildCategory" column="TOP_CHILD_CATEGORY"/>
	</resultMap>
	
	<!-- Files resultMap -->
	<resultMap type="Files" id="files_rm">
	   <id property="fileNo" column="FILE_NO"/>
	   <result property="filePath" column="FILE_PATH"/>
	   <result property="fileRename" column="FILE_RENAME"/>
	   <result property="fileOriginal" column="FILE_ORIGINAL"/>
	   <result property="fileOrder" column="FILE_ORDER"/>
	   <result property="boardNo" column="BOARD_NO"/>
	</resultMap>
	
	<!-- 1) 최신 의뢰 게시글 목록 조회 -->
	<select id="selectRecentRqList" resultMap="board_rm">
		SELECT BOARD_NO, BOARD_TITLE, REQUEST_PRICE, MEMBER_NICKNAME, 
			   THUMBNAIL, CATEGORY_ID, PARENT_CATEGORY_ID, B_CREATE_DATE
		FROM (
		  SELECT 
		  	B.BOARD_NO,
		    B.BOARD_TITLE,
		    R.REQUEST_PRICE,
		    M.MEMBER_NICKNAME,
		   	B_CREATE_DATE,
			R.THUMBNAIL,
		    C.CATEGORY_ID,
		    P.CATEGORY_ID AS PARENT_CATEGORY_ID,
		    ROW_NUMBER() OVER (PARTITION BY P.CATEGORY_ID ORDER BY B.B_CREATE_DATE DESC) AS rn
		  FROM BOARD B
		  JOIN REQUEST R ON R.BOARD_NO = B.BOARD_NO
		  JOIN MEMBER M ON M.MEMBER_NO = B.MEMBER_NO AND M.MEMBER_DEL_FL = 'N' AND M.MEMBER_BAN = 'N'
		  JOIN CATEGORY C ON R.CATEGORY_ID = C.CATEGORY_ID
		  JOIN CATEGORY P ON C.PARENT_NO = P.CATEGORY_ID
		  WHERE B.BOARD_DEL_FL = 'N'
		) 
		<![CDATA[WHERE rn <= 2]]>
		ORDER BY PARENT_CATEGORY_ID, B_CREATE_DATE DESC, BOARD_NO DESC
	</select>

	<!-- 2) 최신 리뷰글 목록 조회 -->
	<select id="selectRecentRvList" resultMap="review_rm">
		SELECT 
		    M.PROFILE_IMG AS SUPPORTER_PROFILE,
		    B.BOARD_NO,
		    M.MEMBER_NICKNAME AS SUPPORTER_NICK,
		    TO_CHAR(ROUND(R.REVIEW_RATING, 1),'0.0') AS REVIEW_RATING,
		    R.REVIEW_CONTENT,
		    B.B_CREATE_DATE AS REVIEW_DATE,
		    M.MEMBER_NO
		FROM REVIEW R
		JOIN BOARD B ON R.BOARD_NO = B.BOARD_NO AND B.BOARD_DEL_FL = 'N'
		JOIN REQUEST RQ ON R.BOARD_NO = RQ.BOARD_NO
		JOIN REQUEST_SUPPORTER RS ON R.BOARD_NO = RS.BOARD_NO
			AND RS.REQUEST_CONFIRM = 'Y' 
		JOIN MEMBER M ON RS.MEMBER_NO = M.MEMBER_NO AND M.MEMBER_DEL_FL = 'N' AND M.MEMBER_BAN = 'N'
		WHERE RQ.REQUEST_STATUS = '완료' AND ROUND(R.REVIEW_RATING, 1) >= 4 <![CDATA[AND ROWNUM <= 5]]>
		ORDER BY B.B_CREATE_DATE DESC
	</select>
	
	<!-- 3) 자유게시판 인기글 목록 조회 -->
	<select id="selectMostBoardLikeList" resultMap="board_rm">
		SELECT B.BOARD_NO, B.BOARD_TITLE, B.BOARD_CONTENT, B.READ_COUNT, M.MEMBER_NICKNAME, M.PROFILE_IMG, M.MEMBER_NO, B.BOARD_CODE,
		    (SELECT COUNT(*) FROM "COMMENT" C WHERE C.BOARD_NO = B.BOARD_NO) AS COMMENT_COUNT,
		    (SELECT F.FILE_PATH || F.FILE_RENAME FROM "FILE" F WHERE F.BOARD_NO = B.BOARD_NO AND F.FILE_ORDER = 0 AND REGEXP_LIKE(F.FILE_RENAME, '\.(jpg|jpeg|png|gif|bmp)$')) AS THUMBNAIL
		FROM (
		    SELECT *
		    FROM (
		        SELECT L.BOARD_NO, COUNT(L.BOARD_NO) AS LIKE_COUNT
		        FROM BOARD_LIKE L
		        JOIN BOARD B ON B.BOARD_NO = L.BOARD_NO
		        JOIN BOARD_TYPE T ON B.BOARD_CODE = T.BOARD_CODE
		        WHERE T.BOARD_NAME LIKE '%자유%' AND BOARD_DEL_FL = 'N'
		        GROUP BY L.BOARD_NO
		        ORDER BY LIKE_COUNT DESC
		    ) 
		) LB
		JOIN BOARD B ON LB.BOARD_NO = B.BOARD_NO
		JOIN MEMBER M ON B.MEMBER_NO = M.MEMBER_NO AND M.MEMBER_DEL_FL = 'N' AND M.MEMBER_BAN = 'N'
		<![CDATA[WHERE ROWNUM <= 4]]> 
		ORDER BY LB.LIKE_COUNT DESC
	</select>
	
	<!-- 4) 인기 조력자(카테고리 그룹) -->
	<select id="selectpopularSupporterList" resultMap="supporter_rm">
		WITH FromAvgParentRating AS (
		    <!-- 각 MEMBER_NO, PARENT_NO별로 REVIEW_RATING의 평균을 계산하고
		         회원 정보와 카테고리 정보(부모 카테고리 및 자식 카테고리)를 포함. -->
		    SELECT S.MEMBER_NO, M.MEMBER_NICKNAME, M.PROFILE_IMG, C.PARENT_NO, P.CATEGORY_NAME,
		           TO_CHAR(TRUNC(AVG(V.REVIEW_RATING), 1), '0.0') AS AVG_REVIEW_RATING 
		    FROM REVIEW V
		    JOIN REQUEST R ON V.BOARD_NO = R.BOARD_NO
		    JOIN REQUEST_SUPPORTER S ON R.BOARD_NO = S.BOARD_NO
		    JOIN MEMBER M ON S.MEMBER_NO = M.MEMBER_NO AND M.MEMBER_DEL_FL = 'N' AND M.MEMBER_BAN = 'N'
		    JOIN CATEGORY C ON R.CATEGORY_ID = C.CATEGORY_ID
		    LEFT JOIN CATEGORY P ON C.PARENT_NO = P.CATEGORY_ID
		    JOIN BOARD B ON B.BOARD_NO = V.BOARD_NO AND B.BOARD_DEL_FL = 'N'
		    WHERE S.REQUEST_CONFIRM = 'Y' 
		    GROUP BY S.MEMBER_NO, M.MEMBER_NICKNAME, M.PROFILE_IMG, C.PARENT_NO, P.CATEGORY_NAME
		    HAVING TRUNC(AVG(V.REVIEW_RATING), 1) >= 4.0
		),
		CountRequestConfirm AS (
		    <!-- 각 MEMBER_NO, PARENT_NO 별 REQUEST_CONFIRM이 'Y'인 개수 계산 -->
		    SELECT S.MEMBER_NO, C.PARENT_NO, 
		           COUNT(S.REQUEST_CONFIRM) AS REQUEST_COUNT
		    FROM REQUEST_SUPPORTER S
		    JOIN REQUEST R ON S.BOARD_NO = R.BOARD_NO
		    JOIN CATEGORY C ON R.CATEGORY_ID = C.CATEGORY_ID
		    WHERE S.REQUEST_CONFIRM = 'Y'
		    GROUP BY S.MEMBER_NO, C.PARENT_NO
		    HAVING COUNT(S.REQUEST_CONFIRM) >= 1 
		),
		RankedChildCategories AS (
		    <!-- 각 MEMBER_NO, PARENT_NO에 대해 평균 REVIEW_RATING이 가장 높은 카테고리 선택 -->
		    SELECT S.MEMBER_NO, C.PARENT_NO, C.CATEGORY_NAME,
		           TRUNC(AVG(V.REVIEW_RATING), 1) AS AVG_REVIEW_RATING, 
		           ROW_NUMBER() OVER (PARTITION BY S.MEMBER_NO, C.PARENT_NO ORDER BY TRUNC(AVG(V.REVIEW_RATING), 1) DESC) AS RANK 
		    FROM REVIEW V
		    JOIN REQUEST R ON V.BOARD_NO = R.BOARD_NO
		    JOIN REQUEST_SUPPORTER S ON R.BOARD_NO = S.BOARD_NO
		    JOIN CATEGORY C ON R.CATEGORY_ID = C.CATEGORY_ID
		    WHERE S.REQUEST_CONFIRM = 'Y' 
		    GROUP BY S.MEMBER_NO, C.PARENT_NO, C.CATEGORY_NAME
		),
		TopChildCategory AS (
		    <!-- 각 MEMBER_NO와 PARENT_NO 조합에서 RANK가 1인 가장 평균 점수가 높은 카테고리 선택 -->
		    SELECT MEMBER_NO, PARENT_NO, CATEGORY_NAME AS TOP_CHILD_CATEGORY, AVG_REVIEW_RATING AS TOP_AVG_REVIEW_RATING
		    FROM RankedChildCategories
		    WHERE RANK = 1 
		),
		FinalResults AS (
		    <!-- 평균 REVIEW_RATING을 기준으로 멤버를 정렬하고 순위를 매김. -->
		    SELECT FAP.MEMBER_NO, FAP.MEMBER_NICKNAME, FAP.PROFILE_IMG, 
		           FAP.PARENT_NO, FAP.CATEGORY_NAME, TCC.TOP_CHILD_CATEGORY, FAP.AVG_REVIEW_RATING,
		           ROW_NUMBER() OVER (PARTITION BY FAP.PARENT_NO ORDER BY FAP.AVG_REVIEW_RATING DESC) AS RANK
		    FROM FromAvgParentRating FAP
		    JOIN TopChildCategory TCC ON FAP.MEMBER_NO = TCC.MEMBER_NO AND FAP.PARENT_NO = TCC.PARENT_NO 
		    JOIN CountRequestConfirm CRC ON FAP.MEMBER_NO = CRC.MEMBER_NO AND FAP.PARENT_NO = CRC.PARENT_NO 
		)
		<!-- 최종 결과: 각 PARENT_NO 그룹에서 상위 1명의 데이터를 반환 -->
		SELECT MEMBER_NO, MEMBER_NICKNAME, PROFILE_IMG, PARENT_NO, CATEGORY_NAME, TOP_CHILD_CATEGORY, AVG_REVIEW_RATING
		FROM FinalResults
		WHERE RANK = 1 
		ORDER BY PARENT_NO
	</select>
	
	<!-- 5) 최상위 조력자 랭킹 -->
	<select id="selecttopSupporterList" resultMap="supporter_rm">
		<!-- 카테고리 이름이 화면에 보이기 때문에 카테고리별 최상위 1명씩 총 5명 조회 -->
		WITH FromAvgParentRating AS (
		    <!-- 각 MEMBER_NO, PARENT_NO 별 평균 REVIEW_RATING 계산 -->
		    SELECT S.MEMBER_NO, M.MEMBER_NICKNAME, M.PROFILE_IMG, C.PARENT_NO, P.CATEGORY_NAME AS PARENT_CATEGORY_NAME, 
		           TO_CHAR(TRUNC(AVG(V.REVIEW_RATING), 1), '0.0') AS AVG_REVIEW_RATING
		    FROM REVIEW V
		    JOIN REQUEST R ON V.BOARD_NO = R.BOARD_NO
		    JOIN REQUEST_SUPPORTER S ON R.BOARD_NO = S.BOARD_NO
		    JOIN MEMBER M ON S.MEMBER_NO = M.MEMBER_NO AND M.MEMBER_DEL_FL = 'N' AND M.MEMBER_BAN = 'N'
		    JOIN CATEGORY C ON R.CATEGORY_ID = C.CATEGORY_ID
		    LEFT JOIN CATEGORY P ON C.PARENT_NO = P.CATEGORY_ID
		    JOIN BOARD B ON B.BOARD_NO = V.BOARD_NO AND B.BOARD_DEL_FL = 'N'
		    WHERE S.REQUEST_CONFIRM = 'Y'
		    GROUP BY S.MEMBER_NO, M.MEMBER_NICKNAME, M.PROFILE_IMG, C.PARENT_NO, P.CATEGORY_NAME
		    HAVING TRUNC(AVG(V.REVIEW_RATING), 1) >= 4.0
		),
		CountRequestConfirm AS (
		    <!-- 각 MEMBER_NO, PARENT_NO 별 REQUEST_CONFIRM이 'Y'인 개수 계산 -->
		    SELECT S.MEMBER_NO, C.PARENT_NO, 
		           COUNT(S.REQUEST_CONFIRM) AS REQUEST_COUNT
		    FROM REQUEST_SUPPORTER S
		    JOIN REQUEST R ON S.BOARD_NO = R.BOARD_NO
		    JOIN CATEGORY C ON R.CATEGORY_ID = C.CATEGORY_ID
		    WHERE S.REQUEST_CONFIRM = 'Y'
		    GROUP BY S.MEMBER_NO, C.PARENT_NO
		    HAVING COUNT(S.REQUEST_CONFIRM) >= 1
		),
		RankedResults AS (
		    <!-- PARENT_NO별로 각 MEMBER의 순위를 매김(AVG_REVIEW_RATING 기준) -->
		    SELECT FAP.MEMBER_NO, FAP.MEMBER_NICKNAME, FAP.PROFILE_IMG, 
		           FAP.PARENT_NO, PARENT_CATEGORY_NAME, FAP.AVG_REVIEW_RATING,
		           ROW_NUMBER() OVER (PARTITION BY FAP.PARENT_NO ORDER BY FAP.AVG_REVIEW_RATING DESC) AS RANK
		    FROM FromAvgParentRating FAP
		    JOIN CountRequestConfirm CRC ON FAP.MEMBER_NO = CRC.MEMBER_NO AND FAP.PARENT_NO = CRC.PARENT_NO
		)
		SELECT MEMBER_NO, MEMBER_NICKNAME, PROFILE_IMG, PARENT_NO, PARENT_CATEGORY_NAME, AVG_REVIEW_RATING
		FROM RankedResults
		WHERE RANK = 1
		ORDER BY PARENT_NO, MEMBER_NO
	</select>
	
	<!-- 최신 의뢰 게시글 목록 조회(카테고리 그룹 ajax) -->
	<select id="selectlatestRequestList" resultMap="board_rm">
		SELECT BOARD_NO, BOARD_TITLE, REQUEST_PRICE, MEMBER_NICKNAME, 
		       THUMBNAIL, CATEGORY_ID, PARENT_CATEGORY_ID, B_CREATE_DATE
		FROM (
		  SELECT 
		    B.BOARD_NO,
		    B.BOARD_TITLE,
		    R.REQUEST_PRICE,
		    M.MEMBER_NICKNAME,
		    B.B_CREATE_DATE,
			R.THUMBNAIL,
		    C.CATEGORY_ID,
			P.CATEGORY_ID AS PARENT_CATEGORY_ID,
		    ROW_NUMBER() OVER (PARTITION BY P.CATEGORY_ID ORDER BY B.B_CREATE_DATE DESC) AS rn
		  FROM BOARD B
		  JOIN REQUEST R ON R.BOARD_NO = B.BOARD_NO AND B.BOARD_DEL_FL = 'N'
		  JOIN MEMBER M ON M.MEMBER_NO = B.MEMBER_NO AND M.MEMBER_DEL_FL = 'N' AND M.MEMBER_BAN = 'N'
		  JOIN CATEGORY C ON R.CATEGORY_ID = C.CATEGORY_ID
		  JOIN CATEGORY P ON C.PARENT_NO = P.CATEGORY_ID
		  WHERE P.CATEGORY_ID = ${cgIndex} + 1  
		) 
		<![CDATA[WHERE rn <= 10]]>
		ORDER BY B_CREATE_DATE DESC, BOARD_NO DESC
	</select>
	
	<!-- 인기 조력자 목록 조회(카테고리 그룹 ajax) -->
	<select id="selectcgPopularSupporterList" resultMap="supporter_rm">
		WITH FromAvgParentRating AS (
		    <!-- MEMBER_NO와 PARENT_NO별로 REVIEW_RATING의 평균(4.0점 이상)을 계산 -->
		    SELECT S.MEMBER_NO, M.MEMBER_NICKNAME, M.PROFILE_IMG, C.PARENT_NO, P.CATEGORY_NAME,
		           TO_CHAR(TRUNC(AVG(V.REVIEW_RATING), 1), '0.0') AS AVG_REVIEW_RATING 
		    FROM REVIEW V
		    JOIN REQUEST R ON V.BOARD_NO = R.BOARD_NO
		    JOIN REQUEST_SUPPORTER S ON R.BOARD_NO = S.BOARD_NO
		    JOIN MEMBER M ON S.MEMBER_NO = M.MEMBER_NO AND M.MEMBER_DEL_FL = 'N' AND M.MEMBER_BAN = 'N'
		    JOIN CATEGORY C ON R.CATEGORY_ID = C.CATEGORY_ID
		    LEFT JOIN CATEGORY P ON C.PARENT_NO = P.CATEGORY_ID
		    JOIN BOARD B ON B.BOARD_NO = V.BOARD_NO AND B.BOARD_DEL_FL = 'N'
		    WHERE C.PARENT_NO = ${cgIndex} + 1 AND S.REQUEST_CONFIRM = 'Y' 
		    GROUP BY S.MEMBER_NO, M.MEMBER_NICKNAME, M.PROFILE_IMG, C.PARENT_NO, P.CATEGORY_NAME
		    HAVING TRUNC(AVG(V.REVIEW_RATING), 1) >= 4.0 
		),
		CountRequestConfirm AS (
		    <!-- MEMBER_NO별로 REQUEST_CONFIRM이 'Y'인 요청 개수(1회 이상) 계산 -->
		    SELECT S.MEMBER_NO, C.PARENT_NO, 
		           COUNT(S.REQUEST_CONFIRM) AS REQUEST_COUNT
		    FROM REQUEST_SUPPORTER S
		    JOIN REQUEST R ON S.BOARD_NO = R.BOARD_NO
		    JOIN CATEGORY C ON R.CATEGORY_ID = C.CATEGORY_ID
		    WHERE C.PARENT_NO = ${cgIndex} + 1 AND S.REQUEST_CONFIRM = 'Y'
		    GROUP BY S.MEMBER_NO, C.PARENT_NO
		    HAVING COUNT(S.REQUEST_CONFIRM) >= 1
		),
		RankedChildCategories AS (
		    <!-- MEMBER_NO와 PARENT_NO별로 평균 REVIEW_RATING이 가장 높은 카테고리 선택 -->
		    SELECT S.MEMBER_NO, C.PARENT_NO, C.CATEGORY_NAME,
		           TRUNC(AVG(V.REVIEW_RATING), 1) AS AVG_REVIEW_RATING,
		           ROW_NUMBER() OVER (PARTITION BY S.MEMBER_NO, C.PARENT_NO ORDER BY TRUNC(AVG(V.REVIEW_RATING), 1) DESC) AS RANK
		    FROM REVIEW V
		    JOIN REQUEST R ON V.BOARD_NO = R.BOARD_NO
		    JOIN REQUEST_SUPPORTER S ON R.BOARD_NO = S.BOARD_NO
		    JOIN CATEGORY C ON R.CATEGORY_ID = C.CATEGORY_ID
		    WHERE C.PARENT_NO = ${cgIndex} + 1 AND S.REQUEST_CONFIRM = 'Y'
		    GROUP BY S.MEMBER_NO, C.PARENT_NO, C.CATEGORY_NAME
		),
		TopChildCategory AS (
		    <!-- MEMBER_NO와 PARENT_NO 조합에서 평균 점수가 가장 높은 카테고리 선택 -->
		    SELECT MEMBER_NO, PARENT_NO, CATEGORY_NAME AS TOP_CHILD_CATEGORY, AVG_REVIEW_RATING AS TOP_AVG_REVIEW_RATING
		    FROM RankedChildCategories
		    WHERE RANK = 1 
		),
		FinalResults AS (
		    <!-- 전체 데이터에서 평균 REVIEW_RATING과 REQUEST_COUNT를 기준으로 순위를 매김 -->
		    SELECT FAP.MEMBER_NO, FAP.MEMBER_NICKNAME, FAP.PROFILE_IMG, 
		           FAP.PARENT_NO, FAP.CATEGORY_NAME, TCC.TOP_CHILD_CATEGORY, FAP.AVG_REVIEW_RATING,
		           CRC.REQUEST_COUNT,
		           ROW_NUMBER() OVER (ORDER BY FAP.AVG_REVIEW_RATING DESC, CRC.REQUEST_COUNT DESC) AS RANK 
		    FROM FromAvgParentRating FAP
		    JOIN TopChildCategory TCC ON FAP.MEMBER_NO = TCC.MEMBER_NO AND FAP.PARENT_NO = TCC.PARENT_NO 
		    JOIN CountRequestConfirm CRC ON FAP.MEMBER_NO = CRC.MEMBER_NO AND FAP.PARENT_NO = CRC.PARENT_NO 
		)
		<!-- 최종 결과: 상위 5명의 데이터를 반환 -->
		SELECT MEMBER_NO, MEMBER_NICKNAME, PROFILE_IMG, PARENT_NO, CATEGORY_NAME, TOP_CHILD_CATEGORY, AVG_REVIEW_RATING, REQUEST_COUNT
		FROM FinalResults
		<![CDATA[WHERE RANK <= 5]]>
		ORDER BY AVG_REVIEW_RATING DESC, REQUEST_COUNT DESC
	</select>
	
	<!-- 자유게시판 게시판 코드 조회 -->
	<select id="selectFreeBoardCode" resultType="_int">
		SELECT BOARD_CODE FROM BOARD
		JOIN BOARD_TYPE USING(BOARD_CODE)
		WHERE BOARD_NAME LIKE '%자유%' AND ROWNUM = 1
	</select>
	
	<!-- 의뢰게시판 게시판 코드 조회 -->
	<select id="selectRequestBoardCode" resultType="_int">
		SELECT BOARD_CODE FROM BOARD
		JOIN BOARD_TYPE USING(BOARD_CODE)
		WHERE BOARD_NAME LIKE '%의뢰%' AND ROWNUM = 1
	</select>
	
</mapper>
