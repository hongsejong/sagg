<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="boardMapper">

	<resultMap type="Board" id="board_rm">
	
		<id property="boardNo" column="BOARD_NO"/>
	   
		<result property="boardTitle" column="BOARD_TITLE"/>
		<result property="boardContent" column="BOARD_CONTENT"/>
		<result property="boardCreateDate" column="B_CREATE_DATE"/>
		<result property="boardUpdateDate" column="B_UPDATE_DATE"/>
		<result property="readCount" column="READ_COUNT"/>
		<result property="boardCode" column="BOARD_CODE"/>
		<result property="parentBoardNo" column="PARENT_BOARD_NO"/>
		
		<result property="commentCount" column="COMMENT_COUNT"/>
		<result property="likeCount" column="LIKE_COUNT"/>
		
		<result property="memberNo" column="MEMBER_NO"/>
		<result property="memberNickname" column="MEMBER_NICKNAME"/>
		<result property="profileImage" column="PROFILE_IMG"/>
		
		<result property="thumbnail" column="THUMBNAIL"/>
		
	</resultMap>
	
	<resultMap type="Files" id="files_rm">
	   <id property="fileNo" column="FILE_NO"/>
	   <result property="filePath" column="FILE_PATH"/>
	   <result property="fileRename" column="FILE_RENAME"/>
	   <result property="fileOriginal" column="FILE_ORIGINAL"/>
	   <result property="fileOrder" column="FILE_ORDER"/>
	   <result property="boardNo" column="BOARD_NO"/>
	</resultMap>
	
	
	<!-- 특정 게시판의 삭제되지 않은 게시글 수 조회 -->
	<select id="getListCount" resultType="_int">
		SELECT COUNT(*) FROM BOARD 
		WHERE  BOARD_DEL_FL = 'N'
		<if test='1 == boardCode'>
			AND BOARD_CODE IN(2,3)
		</if>
		<if test='1 != boardCode'>
			AND BOARD_CODE = #{boardCode}
		</if>
	</select>
	
	<!-- 게시글 목록 조회 -->
	<select id="selectBoardList" resultMap="board_rm">
		SELECT BOARD_NO, BOARD_TITLE, MEMBER_NICKNAME, READ_COUNT, PROFILE_IMG, BOARD_CODE, MEMBER_NO, BOARD_CONTENT, PARENT_BOARD_NO,
			<![CDATA[
				CASE
					WHEN CURRENT_DATE - B_CREATE_DATE < 1 / 24 / 60
					THEN FLOOR( (CURRENT_DATE - B_CREATE_DATE) * 24 * 60 * 60 ) || '초 전'
					WHEN CURRENT_DATE - B_CREATE_DATE < 1 / 24
					THEN FLOOR( (CURRENT_DATE - B_CREATE_DATE) * 24 * 60) || '분 전'
					WHEN CURRENT_DATE - B_CREATE_DATE < 1
					THEN FLOOR( (CURRENT_DATE - B_CREATE_DATE) * 24) || '시간 전'
					ELSE TO_CHAR(B_CREATE_DATE, 'YYYY-MM-DD')
				END B_CREATE_DATE,
			]]>
			(SELECT COUNT(*) FROM "COMMENT" C WHERE C.BOARD_NO = B.BOARD_NO AND C.COMMENT_DEL_FL = 'N') COMMENT_COUNT,
			(SELECT COUNT(*) FROM "BOARD_LIKE" L WHERE L.BOARD_NO = B.BOARD_NO) LIKE_COUNT,
			(SELECT FILE_PATH || FILE_RENAME FROM "FILE" F WHERE F.BOARD_NO = B.BOARD_NO AND FILE_ORDER = 0 AND REGEXP_LIKE(FILE_RENAME, '\.(jpg|jpeg|png|gif|bmp)$') AND ROWNUM = 1) THUMBNAIL
		FROM "BOARD" B
		JOIN "MEMBER" USING(MEMBER_NO)
		WHERE BOARD_DEL_FL = 'N'
		
		<if test='1 == boardCode'>
			AND BOARD_CODE IN(2,3)
		</if>
		<if test='1 != boardCode'>
			AND BOARD_CODE = #{boardCode}
		</if>
		ORDER BY B_CREATE_DATE DESC, BOARD_NO DESC
	</select>
	
	<!-- 게시판 종류 목록 조회 -->
	<select id="selectBoardTypeList" resultType="map">
		SELECT * FROM BOARD_TYPE ORDER BY 1
	</select>
	
	<!-- 게시글 상세 조회 -->
	<select id="selectBoardDetail" resultMap="board_rm">
		SELECT BOARD_NO, BOARD_TITLE, BOARD_CONTENT, READ_COUNT, MEMBER_NICKNAME, MEMBER_NO ,
			PROFILE_IMG, BOARD_CODE,
			TO_CHAR(B_CREATE_DATE, 'YYYY"년" MM"월" DD"일" HH24:MI:SS') B_CREATE_DATE, 
			TO_CHAR(B_UPDATE_DATE, 'YYYY"년" MM"월" DD"일" HH24:MI:SS') B_UPDATE_DATE,
			(SELECT COUNT(*) FROM BOARD_LIKE L WHERE L.BOARD_NO = B.BOARD_NO ) LIKE_COUNT
		FROM BOARD B
		JOIN MEMBER USING(MEMBER_NO)
		WHERE BOARD_DEL_FL = 'N'
		AND BOARD_CODE = #{boardCode}
		AND BOARD_NO = #{boardNo}
	</select>
	
	<!-- 좋아요 여부 확인 -->
	<select id="boardLikeCheck" resultType="_int">
		SELECT COUNT(*) FROM BOARD_LIKE 
		WHERE MEMBER_NO = #{memberNo}
		AND BOARD_NO = #{boardNo}
	</select>
	
	<!-- 좋아요 상태 X -> 등록 -->
	<insert id="insertBoardLike">
		INSERT INTO BOARD_LIKE VALUES(#{boardNo}, #{memberNo})
	</insert>
	
	<!-- 좋아요 상태 O -> 삭제 -->
	<delete id="deleteBoardLike">
		DELETE FROM BOARD_LIKE
		WHERE BOARD_NO = #{boardNo}
		AND MEMBER_NO = #{memberNo}
	</delete>
	
	<!-- 좋아요 수 조회 -->
	<select id="boardLikeCount" resultType="_int">
		SELECT COUNT(*) FROM BOARD_LIKE 
		WHERE BOARD_NO = #{boardNo}
	</select>
	
	<!-- 게시글 제목, 컨텐츠 등록 -->
	<insert id="boardInsert" parameterType="Board" useGeneratedKeys="true">
	
		<selectKey order="BEFORE" resultType="_int" keyProperty="boardNo">
			SELECT SEQ_BOARD_NO.NEXTVAL FROM DUAL
		</selectKey>
		
		INSERT INTO BOARD VALUES(#{boardNo},#{boardTitle},#{boardContent},CURRENT_DATE, DEFAULT, DEFAULT, DEFAULT,#{memberNo},#{boardCode},DEFAULT,DEFAULT)
	</insert>
	
	<!-- 게시글 삭제 -->
	<update id="deleteBoard">
		UPDATE BOARD 
		SET BOARD_DEL_FL = 'Y'
		WHERE BOARD_NO = #{boardNo}
	</update>
	
	<!-- 이미지 중복 체크 -->
	<select id="selectFileRenamesByBoardNo" resultType="string">
    	SELECT FILE_RENAME FROM "FILE" WHERE BOARD_NO = #{boardNo}
	</select>
	
	<!-- orderNo 최대값 가져오기-->
	<select id="selectMaxFileOrderByBoardNo" resultType="int">
		SELECT COALESCE(MAX(FILE_ORDER), 0) FROM "FILE" WHERE BOARD_NO = #{boardNo}
	</select>
	
	
	
	<!-- 게시글 이미지 등록 -->
	<insert id="saveBoardImages">
		INSERT INTO "FILE" (FILE_PATH, FILE_RENAME, FILE_ORIGINAL, FILE_ORDER, BOARD_NO)
	    VALUES (#{filePath}, #{fileRename}, #{fileOriginal}, #{fileOrder}, #{boardNo})
	</insert>
	
	<!-- 게시글 수정 -->
	<update id="updateBoard">
		UPDATE BOARD 
		SET BOARD_TITLE = #{boardTitle}, 
		BOARD_CONTENT = #{boardContent}, 
		B_UPDATE_DATE = CURRENT_DATE 
		WHERE BOARD_DEL_FL = 'N'
		AND BOARD_NO = #{boardNo}
		AND MEMBER_NO = #{memberNo}
	</update>
	
	<!-- 등록된 이미지 목록 가져오기 -->
	<select id="selectFilesByBoardNo" resultMap="files_rm">
		SELECT DISTINCT FILE_NO, FILE_PATH, FILE_RENAME, FILE_ORIGINAL, FILE_ORDER, BOARD_NO
		FROM "FILE"
		WHERE BOARD_NO = #{boardNo}
		ORDER BY FILE_ORDER ASC
	</select>
	
	<!-- 등록된 이미지 목록 삭제 -->
	<delete id="deleteFileByNo">
		DELETE FROM "FILE"
    	WHERE FILE_NO = #{fileNo}
	</delete>
	
	<!-- 조회수 증가 -->
	<update id="updateReadCount">
		UPDATE BOARD 
		SET READ_COUNT = READ_COUNT + 1
		WHERE BOARD_NO = #{boardNo}
	</update>
	
	<!-- 스레드 게시글 목록 조회 -->
	<select id="selectThredList" resultMap="board_rm">
		SELECT LEVEL AS thread_level,
			B.BOARD_NO,
			B.PARENT_BOARD_NO,
			B.BOARD_TITLE,
			B.BOARD_CONTENT,
			TO_CHAR(B_CREATE_DATE, 'YYYY"년" MM"월" DD"일" HH24:MI:SS') B_CREATE_DATE,
			B.MEMBER_NO,
			M.MEMBER_NICKNAME,
			M.PROFILE_IMG
		FROM BOARD B
		JOIN MEMBER M ON B.MEMBER_NO = M.MEMBER_NO
		WHERE B.BOARD_CODE = 4                -- 쓰레드형 게시판 (댓글게시판)이라고 가정
		AND B.BOARD_DEL_FL = 'N'            -- 삭제되지 않은 글만
		START WITH B.PARENT_BOARD_NO IS NULL
		CONNECT BY PRIOR B.BOARD_NO = B.PARENT_BOARD_NO
		ORDER SIBLINGS BY B.B_CREATE_DATE DESC
	</select>
	
	<!-- 스레드 게시글 등록 -->
	<insert id="threadInsert" useGeneratedKeys="true">
		<selectKey order="BEFORE" resultType="_int" keyProperty="boardNo">
			SELECT SEQ_BOARD_NO.NEXTVAL FROM DUAL
		</selectKey>
	
		INSERT INTO BOARD (BOARD_NO, BOARD_TITLE, BOARD_CONTENT, B_CREATE_DATE, B_UPDATE_DATE, READ_COUNT, BOARD_DEL_FL, MEMBER_NO, BOARD_CODE, BOARD_STATUS, PARENT_BOARD_NO)  
		VALUES (${boardNo},TO_CHAR(${boardNo}) || '스레드 게시글',#{boardContent},CURRENT_DATE, DEFAULT, DEFAULT, DEFAULT,#{memberNo},4,DEFAULT,
		<if test="parentBoardNo == 0">
			NULL
		</if>
		<if test="parentBoardNo != 0">
			#{parentBoardNo}
		</if>
		)
	</insert>
	
	<!-- 스레드 게시글 삭제 -->
	<update id="deleteThred">
		UPDATE BOARD SET BOARD_DEL_FL = 'Y' WHERE BOARD_NO = #{boardNo}
	</update>
	
	<!-- 스레드 게시글 수정 -->
	<update id="updateThread">
		UPDATE BOARD SET BOARD_CONTENT = #{boardContent} WHERE BOARD_NO = #{boardNo}
	</update>
	
	<!-- 특정 게시판의 삭제되지 않고, 검색 조건이 일치하는 게시글 수 조회 -->
	<select id="getSearchListCount" resultType="_int">
		SELECT COUNT(*) FROM BOARD
		
		<!-- 작성자 검색 -->
		<if test='key == "w"'>
			JOIN MEMBER USING(MEMBER_NO)
		</if>
		
		WHERE BOARD_DEL_FL = 'N'
		
		<!-- 통합 검색이 아닌 경우 -->
		<if test='key != "all"'>
			AND BOARD_CODE = #{boardCode}
		</if>
		
		<!-- 제목 또는 통합 검색 -->
		<if test='key == "t" or key == "all"' >
			AND BOARD_TITLE LIKE '%${query}%'
		</if>
		
		<!-- 내용 -->
		<if test='key == "c"'>
			AND BOARD_CONTENT LIKE '%${query}%'
		</if>
		
		<!-- 제목+내용 -->
		<if test='key == "tc"'>
			AND (BOARD_TITLE LIKE '%${query}%' OR BOARD_CONTENT LIKE '%${query}%')
		</if>
		
		<!-- 작성자(닉네임) -->
		<if test='key == "w"'>
			AND MEMBER_NICKNAME LIKE '%${query}%'
		</if>
	</select>
	
	<!-- 게시글 목록 조회(검색) -->
	<select id="searchBoardList" resultMap="board_rm">
		SELECT BOARD_NO, BOARD_TITLE, MEMBER_NICKNAME, READ_COUNT, PROFILE_IMG, BOARD_CODE, MEMBER_NO, BOARD_CONTENT, PARENT_BOARD_NO,
			<![CDATA[
				CASE
					WHEN CURRENT_DATE - B_CREATE_DATE < 1 / 24 / 60
					THEN FLOOR( (CURRENT_DATE - B_CREATE_DATE) * 24 * 60 * 60 ) || '초 전'
					WHEN CURRENT_DATE - B_CREATE_DATE < 1 / 24
					THEN FLOOR( (CURRENT_DATE - B_CREATE_DATE) * 24 * 60) || '분 전'
					WHEN CURRENT_DATE - B_CREATE_DATE < 1
					THEN FLOOR( (CURRENT_DATE - B_CREATE_DATE) * 24) || '시간 전'
					ELSE TO_CHAR(B_CREATE_DATE, 'YYYY-MM-DD')
				END B_CREATE_DATE,
			]]>
			(SELECT COUNT(*) FROM "COMMENT" C WHERE C.BOARD_NO = B.BOARD_NO AND C.COMMENT_DEL_FL = 'N') COMMENT_COUNT,
			(SELECT COUNT(*) FROM "BOARD_LIKE" L WHERE L.BOARD_NO = B.BOARD_NO) LIKE_COUNT,
			(SELECT FILE_PATH || FILE_RENAME FROM "FILE" F WHERE F.BOARD_NO = B.BOARD_NO AND FILE_ORDER = 0 AND REGEXP_LIKE(FILE_RENAME, '\.(jpg|jpeg|png|gif|bmp)$') ) THUMBNAIL
		FROM "BOARD" B
		JOIN "MEMBER" USING(MEMBER_NO)
		WHERE BOARD_DEL_FL = 'N'
		
		<!-- 통합 검색이 아닌 경우 -->
		<if test='key != "all" and boardCode != 1'>
			AND BOARD_CODE = #{boardCode}
		</if>
		<!-- 제목 또는 통합 검색 -->
		<if test='key == "t" or key == "all"'>
			AND BOARD_TITLE LIKE '%${query}%'
		</if>
		
		<!-- 내용 -->
		<if test='key == "c"'>
			AND BOARD_CONTENT LIKE '%${query}%'
		</if>
		
		<!-- 제목+내용 -->
		<if test='key == "tc"'>
			AND (BOARD_TITLE LIKE '%${query}%' OR BOARD_CONTENT LIKE '%${query}%')
		</if>
		
		<!-- 작성자(닉네임) -->
		<if test='key == "w"'>
			AND MEMBER_NICKNAME LIKE '%${query}%'
		</if>
		ORDER BY BOARD_NO DESC
	</select>
	
	<!-- 헤더 검색 -->
	<select id="headerSearch" resultType="map">
		SELECT * FROM(
			SELECT BOARD_NO, BOARD_TITLE, READ_COUNT, BOARD_CODE, BOARD_NAME
			FROM BOARD
			JOIN BOARD_TYPE USING(BOARD_CODE)
			WHERE BOARD_TITLE LIKE '%${query}%'
			AND BOARD_DEL_FL = 'N'
			ORDER BY READ_COUNT DESC, BOARD_NO DESC)
		<![CDATA[ WHERE ROWNUM <= 10  ]]>
	</select>
	
	<!-- DB에 없는 게시판 이미지 파일을 서버에서 주기적으로 삭제 -->
	<select id="selectBoardImageFileList" resultType="string">
		SELECT FILE_RENAME FROM "FILE"
	</select>
	
	
</mapper>
